
swarm.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002a8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          0000000a  00800100  00800100  0000031c  2**0
                  ALLOC
  2 .debug_aranges 00000020  00000000  00000000  0000031c  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 000000be  00000000  00000000  0000033c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000001af  00000000  00000000  000003fa  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000100  00000000  00000000  000005a9  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000002f5  00000000  00000000  000006a9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000050  00000000  00000000  000009a0  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000117  00000000  00000000  000009f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000004c  00000000  00000000  00000b07  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__vector_9>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 48 00 	jmp	0x90	; 0x90 <__vector_18>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	aa 30       	cpi	r26, 0x0A	; 10
  80:	b1 07       	cpc	r27, r17
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 b2 00 	call	0x164	; 0x164 <main>
  88:	0c 94 52 01 	jmp	0x2a4	; 0x2a4 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <__vector_18>:
volatile uint16_t timer;
volatile uint16_t last_receive_time;
volatile uint16_t next_led_time;

ISR(USART_RX_vect) 
{
  90:	1f 92       	push	r1
  92:	0f 92       	push	r0
  94:	0f b6       	in	r0, 0x3f	; 63
  96:	0f 92       	push	r0
  98:	11 24       	eor	r1, r1
  9a:	8f 93       	push	r24
  9c:	9f 93       	push	r25
	unsigned char status = 0x00;
	if(received_number==0)
  9e:	80 91 03 01 	lds	r24, 0x0103
  a2:	88 23       	and	r24, r24
  a4:	41 f4       	brne	.+16     	; 0xb6 <__vector_18+0x26>
	{
		status = UCSR0A;
  a6:	90 91 c0 00 	lds	r25, 0x00C0
		left_motor = UDR0;
  aa:	80 91 c6 00 	lds	r24, 0x00C6
  ae:	80 93 07 01 	sts	0x0107, r24
		received_number = 1;
  b2:	81 e0       	ldi	r24, 0x01	; 1
  b4:	0b c0       	rjmp	.+22     	; 0xcc <__vector_18+0x3c>
	}
	else if (received_number==1)
  b6:	80 91 03 01 	lds	r24, 0x0103
  ba:	81 30       	cpi	r24, 0x01	; 1
  bc:	51 f4       	brne	.+20     	; 0xd2 <__vector_18+0x42>
	{
		status = UCSR0A;
  be:	90 91 c0 00 	lds	r25, 0x00C0
		right_motor = UDR0;
  c2:	80 91 c6 00 	lds	r24, 0x00C6
  c6:	80 93 02 01 	sts	0x0102, r24
		received_number = 2;
  ca:	82 e0       	ldi	r24, 0x02	; 2
  cc:	80 93 03 01 	sts	0x0103, r24
  d0:	11 c0       	rjmp	.+34     	; 0xf4 <__vector_18+0x64>
	}
	else if (received_number==2)
  d2:	80 91 03 01 	lds	r24, 0x0103
  d6:	82 30       	cpi	r24, 0x02	; 2
  d8:	41 f4       	brne	.+16     	; 0xea <__vector_18+0x5a>
	{
		status = UCSR0A;
  da:	90 91 c0 00 	lds	r25, 0x00C0
		time_to_run = UDR0;
  de:	80 91 c6 00 	lds	r24, 0x00C6
  e2:	80 93 06 01 	sts	0x0106, r24
		received_number = 3;
  e6:	83 e0       	ldi	r24, 0x03	; 3
  e8:	f1 cf       	rjmp	.-30     	; 0xcc <__vector_18+0x3c>
	}
	else
	{// this means that there is a new command before the last one was run for
	// some reason. This shouldn't happen, so there was an error in the code
	// and we should stop.
		left_motor = 0;
  ea:	10 92 07 01 	sts	0x0107, r1
		right_motor = 0;
  ee:	10 92 02 01 	sts	0x0102, r1
  f2:	90 e0       	ldi	r25, 0x00	; 0
	}
	// check to see if there were any errors
	if ( status & (_BV(FE0)| _BV(DOR0)| _BV(UPE0)) )
  f4:	9c 71       	andi	r25, 0x1C	; 28
  f6:	11 f0       	breq	.+4      	; 0xfc <__vector_18+0x6c>
		received_number=0;
  f8:	10 92 03 01 	sts	0x0103, r1
	last_receive_time = timer;
  fc:	80 91 00 01 	lds	r24, 0x0100
 100:	90 91 01 01 	lds	r25, 0x0101
 104:	90 93 05 01 	sts	0x0105, r25
 108:	80 93 04 01 	sts	0x0104, r24



}
 10c:	9f 91       	pop	r25
 10e:	8f 91       	pop	r24
 110:	0f 90       	pop	r0
 112:	0f be       	out	0x3f, r0	; 63
 114:	0f 90       	pop	r0
 116:	1f 90       	pop	r1
 118:	18 95       	reti

0000011a <__vector_9>:

/* Should have a timer event every 20ms
	*/
ISR(TIMER2_OVF_vect)
{
 11a:	1f 92       	push	r1
 11c:	0f 92       	push	r0
 11e:	0f b6       	in	r0, 0x3f	; 63
 120:	0f 92       	push	r0
 122:	11 24       	eor	r1, r1
 124:	8f 93       	push	r24
 126:	9f 93       	push	r25
	timer++;
 128:	80 91 00 01 	lds	r24, 0x0100
 12c:	90 91 01 01 	lds	r25, 0x0101
 130:	01 96       	adiw	r24, 0x01	; 1
 132:	90 93 01 01 	sts	0x0101, r25
 136:	80 93 00 01 	sts	0x0100, r24
	TCNT2 = T2COUNT;
 13a:	82 eb       	ldi	r24, 0xB2	; 178
 13c:	80 93 b2 00 	sts	0x00B2, r24
}
 140:	9f 91       	pop	r25
 142:	8f 91       	pop	r24
 144:	0f 90       	pop	r0
 146:	0f be       	out	0x3f, r0	; 63
 148:	0f 90       	pop	r0
 14a:	1f 90       	pop	r1
 14c:	18 95       	reti

0000014e <USART_Init>:

void USART_Init(unsigned int ubrr)
{
	// set baud rate
	UBRR0H = (unsigned char) (ubrr>>8);
 14e:	90 93 c5 00 	sts	0x00C5, r25
	UBRR0L = (unsigned char) ubrr;
 152:	80 93 c4 00 	sts	0x00C4, r24
	// enable receiver and receiver interrupt
	UCSR0B = _BV(RXEN0)| _BV(RXCIE0);
 156:	80 e9       	ldi	r24, 0x90	; 144
 158:	80 93 c1 00 	sts	0x00C1, r24
	// set frame format, 8 data, 2 stop bits
	UCSR0C = (1<<USBS0)|(3<<UCSZ00);
 15c:	8e e0       	ldi	r24, 0x0E	; 14
 15e:	80 93 c2 00 	sts	0x00C2, r24
}
 162:	08 95       	ret

00000164 <main>:
}

void USART_Init(unsigned int ubrr)
{
	// set baud rate
	UBRR0H = (unsigned char) (ubrr>>8);
 164:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = (unsigned char) ubrr;
 168:	83 e3       	ldi	r24, 0x33	; 51
 16a:	80 93 c4 00 	sts	0x00C4, r24
	// enable receiver and receiver interrupt
	UCSR0B = _BV(RXEN0)| _BV(RXCIE0);
 16e:	80 e9       	ldi	r24, 0x90	; 144
 170:	80 93 c1 00 	sts	0x00C1, r24
	// set frame format, 8 data, 2 stop bits
	UCSR0C = (1<<USBS0)|(3<<UCSZ00);
 174:	8e e0       	ldi	r24, 0x0E	; 14
 176:	80 93 c2 00 	sts	0x00C2, r24

int main(void)
{
	uint8_t led_state = 0;
	USART_Init(MYUBRR);
	DDRD = 0xFF;
 17a:	9f ef       	ldi	r25, 0xFF	; 255
 17c:	9a b9       	out	0x0a, r25	; 10
	PORTD = _BV(3)|_BV(7);
 17e:	88 e8       	ldi	r24, 0x88	; 136
 180:	8b b9       	out	0x0b, r24	; 11
	DDRB = 0xFF;
 182:	94 b9       	out	0x04, r25	; 4
	PORTB = 0x00;
 184:	15 b8       	out	0x05, r1	; 5
	// set the timer counter control registers for timer 0
	// This is the timer for the PWM for the motors
	TCCR0A = _BV(COM0A1)| _BV(COM0B1)| _BV(COM0B1)| _BV(WGM20);
 186:	81 ea       	ldi	r24, 0xA1	; 161
 188:	84 bd       	out	0x24, r24	; 36
	TCCR0B = _BV(CS00);
 18a:	81 e0       	ldi	r24, 0x01	; 1
 18c:	85 bd       	out	0x25, r24	; 37
	//OCR0A = 75;
	// This is the value for motor connected to "Left Motor" connector
	// Allowed range is 0-255, 255 is always on, 0 is always off
	//OCR0B = 75;
		// set the counter to 'zero'
	TCNT2 = T2COUNT;
 18e:	82 eb       	ldi	r24, 0xB2	; 178
 190:	80 93 b2 00 	sts	0x00B2, r24
	// set the prescaler to 1024 and enable interrupt on overflow for timer 2
	// This is the timer for the LED operation
	TCCR2B = _BV(CS22)|_BV(CS21)|_BV(CS20);
 194:	87 e0       	ldi	r24, 0x07	; 7
 196:	80 93 b1 00 	sts	0x00B1, r24
	// make sure that all the defaults are kept
	TCCR2A = 0;
 19a:	10 92 b0 00 	sts	0x00B0, r1
	TIMSK2 |= _BV(TOIE2);
 19e:	80 91 70 00 	lds	r24, 0x0070
 1a2:	81 60       	ori	r24, 0x01	; 1
 1a4:	80 93 70 00 	sts	0x0070, r24
	PRR = (_BV(PRTIM0)|_BV(PRTIM1)|_BV(PRTIM2));
 1a8:	88 e6       	ldi	r24, 0x68	; 104
 1aa:	80 93 64 00 	sts	0x0064, r24
	sei();
 1ae:	78 94       	sei
	PORTD |= _BV(LEDPIN);
 1b0:	5a 9a       	sbi	0x0b, 2	; 11
 1b2:	50 e0       	ldi	r21, 0x00	; 0
   
   	while(1)
   	{
		// if the time to run is done then shut off motors
   		if((last_receive_time+time_to_run)<timer)
 1b4:	80 91 04 01 	lds	r24, 0x0104
 1b8:	90 91 05 01 	lds	r25, 0x0105
 1bc:	40 91 06 01 	lds	r20, 0x0106
 1c0:	20 91 00 01 	lds	r18, 0x0100
 1c4:	30 91 01 01 	lds	r19, 0x0101
 1c8:	84 0f       	add	r24, r20
 1ca:	91 1d       	adc	r25, r1
 1cc:	82 17       	cp	r24, r18
 1ce:	93 07       	cpc	r25, r19
 1d0:	40 f4       	brcc	.+16     	; 0x1e2 <main+0x7e>
		{
			right_motor = 0;
 1d2:	10 92 02 01 	sts	0x0102, r1
			left_motor = 0;
 1d6:	10 92 07 01 	sts	0x0107, r1
			// turn off motor outputs
			PORTD &= ~(_BV(R_BACK)|_BV(R_FOR)|_BV(L_FOR));
 1da:	8b b1       	in	r24, 0x0b	; 11
 1dc:	87 76       	andi	r24, 0x67	; 103
 1de:	8b b9       	out	0x0b, r24	; 11
			PORTB &= ~(_BV(L_BACK));
 1e0:	28 98       	cbi	0x05, 0	; 5
		}
		if(received_number>2)
 1e2:	80 91 03 01 	lds	r24, 0x0103
 1e6:	83 30       	cpi	r24, 0x03	; 3
 1e8:	e0 f0       	brcs	.+56     	; 0x222 <main+0xbe>
		{
			received_number=0;
 1ea:	10 92 03 01 	sts	0x0103, r1
			// if the msb is 1 then move in reverse else move forwards
			if((1<<7) & right_motor)
 1ee:	80 91 02 01 	lds	r24, 0x0102
 1f2:	87 ff       	sbrs	r24, 7
 1f4:	03 c0       	rjmp	.+6      	; 0x1fc <main+0x98>
			{
				PORTD |= (_BV(R_BACK));
 1f6:	5c 9a       	sbi	0x0b, 4	; 11
				PORTD &= ~(_BV(R_FOR));
 1f8:	5b 98       	cbi	0x0b, 3	; 11
 1fa:	02 c0       	rjmp	.+4      	; 0x200 <main+0x9c>
			}
			else
			{
				PORTD |= _BV(R_FOR);
 1fc:	5b 9a       	sbi	0x0b, 3	; 11
				PORTD &= ~(_BV(R_BACK));
 1fe:	5c 98       	cbi	0x0b, 4	; 11
			}
			// if the msb is 1 then move in reverse else move forwards
			if((1<<7)&left_motor)
 200:	80 91 07 01 	lds	r24, 0x0107
 204:	87 ff       	sbrs	r24, 7
 206:	03 c0       	rjmp	.+6      	; 0x20e <main+0xaa>
			{
				PORTB |= _BV(L_BACK);
 208:	28 9a       	sbi	0x05, 0	; 5
				PORTD &= ~(_BV(L_FOR));
 20a:	5f 98       	cbi	0x0b, 7	; 11
 20c:	02 c0       	rjmp	.+4      	; 0x212 <main+0xae>
			}
			else
			{
				PORTD |= _BV(L_FOR);
 20e:	5f 9a       	sbi	0x0b, 7	; 11
				PORTB &= ~(_BV(L_BACK));
 210:	28 98       	cbi	0x05, 0	; 5
			}
			// left shift one place and then output to motors
			OCR0A = (right_motor<<1);
 212:	80 91 02 01 	lds	r24, 0x0102
 216:	88 0f       	add	r24, r24
 218:	87 bd       	out	0x27, r24	; 39
			OCR0B = (left_motor<<1);
 21a:	80 91 07 01 	lds	r24, 0x0107
 21e:	88 0f       	add	r24, r24
 220:	88 bd       	out	0x28, r24	; 40
		}

		// set it up to blink the LED in a 'heartbeat'
		if((next_led_time < timer))
 222:	20 91 08 01 	lds	r18, 0x0108
 226:	30 91 09 01 	lds	r19, 0x0109
 22a:	80 91 00 01 	lds	r24, 0x0100
 22e:	90 91 01 01 	lds	r25, 0x0101
 232:	28 17       	cp	r18, r24
 234:	39 07       	cpc	r19, r25
 236:	08 f0       	brcs	.+2      	; 0x23a <main+0xd6>
 238:	bd cf       	rjmp	.-134    	; 0x1b4 <main+0x50>
		{
			// check for next state
			if(led_state==0)
 23a:	55 23       	and	r21, r21
 23c:	61 f4       	brne	.+24     	; 0x256 <main+0xf2>
			{
				led_state++;
				PORTD |= (1<<LEDPIN);
 23e:	5a 9a       	sbi	0x0b, 2	; 11
				next_led_time = timer + 10;
 240:	80 91 00 01 	lds	r24, 0x0100
 244:	90 91 01 01 	lds	r25, 0x0101
 248:	0a 96       	adiw	r24, 0x0a	; 10
 24a:	90 93 09 01 	sts	0x0109, r25
 24e:	80 93 08 01 	sts	0x0108, r24
 252:	51 e0       	ldi	r21, 0x01	; 1
 254:	af cf       	rjmp	.-162    	; 0x1b4 <main+0x50>
			}
			else if(led_state==1)
 256:	51 30       	cpi	r21, 0x01	; 1
 258:	61 f4       	brne	.+24     	; 0x272 <main+0x10e>
			{
				led_state++;
				PORTD &= ~(1<<LEDPIN);
 25a:	5a 98       	cbi	0x0b, 2	; 11
				next_led_time = timer + 10;
 25c:	80 91 00 01 	lds	r24, 0x0100
 260:	90 91 01 01 	lds	r25, 0x0101
 264:	0a 96       	adiw	r24, 0x0a	; 10
 266:	90 93 09 01 	sts	0x0109, r25
 26a:	80 93 08 01 	sts	0x0108, r24
 26e:	52 e0       	ldi	r21, 0x02	; 2
 270:	a1 cf       	rjmp	.-190    	; 0x1b4 <main+0x50>
			}
			else if(led_state==2)
 272:	52 30       	cpi	r21, 0x02	; 2
 274:	61 f4       	brne	.+24     	; 0x28e <main+0x12a>
			{
				led_state++;
				PORTD |= (1<<LEDPIN);
 276:	5a 9a       	sbi	0x0b, 2	; 11
				next_led_time = timer + 10;
 278:	80 91 00 01 	lds	r24, 0x0100
 27c:	90 91 01 01 	lds	r25, 0x0101
 280:	0a 96       	adiw	r24, 0x0a	; 10
 282:	90 93 09 01 	sts	0x0109, r25
 286:	80 93 08 01 	sts	0x0108, r24
 28a:	53 e0       	ldi	r21, 0x03	; 3
 28c:	93 cf       	rjmp	.-218    	; 0x1b4 <main+0x50>
			}
			else
			{
				led_state=0;
				PORTD &= ~(1<<LEDPIN);
 28e:	5a 98       	cbi	0x0b, 2	; 11
				next_led_time = timer + 50;
 290:	80 91 00 01 	lds	r24, 0x0100
 294:	90 91 01 01 	lds	r25, 0x0101
 298:	c2 96       	adiw	r24, 0x32	; 50
 29a:	90 93 09 01 	sts	0x0109, r25
 29e:	80 93 08 01 	sts	0x0108, r24
 2a2:	87 cf       	rjmp	.-242    	; 0x1b2 <main+0x4e>

000002a4 <_exit>:
 2a4:	f8 94       	cli

000002a6 <__stop_program>:
 2a6:	ff cf       	rjmp	.-2      	; 0x2a6 <__stop_program>
